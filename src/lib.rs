/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uint = 16;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT64_MAX: ::std::os::raw::c_int = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const RSIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const WS2811: ::std::os::raw::c_uint = 0;
pub const WS2812: ::std::os::raw::c_uint = 2;
pub const WS2812B: ::std::os::raw::c_uint = 2;
pub const TM1803: ::std::os::raw::c_uint = 3;
pub const TM1829: ::std::os::raw::c_uint = 4;
pub const WS2812B2: ::std::os::raw::c_uint = 5;
pub const SK6812RGBW: ::std::os::raw::c_uint = 6;
pub type byte = ::std::os::raw::c_uchar;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __mbstate8: __BindgenUnionField<[::std::os::raw::c_char; 128usize]>,
    pub _mbstateL: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ));
    assert_eq! (::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_pthread_handler_rec )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) .
                __routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! (
                __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next )
                ));
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_condattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutexattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque )
                ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize , concat
               ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __cleanup_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __opaque ) ));
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug)]
pub struct Adafruit_NeoPixel {
    pub begun: bool,
    pub numLEDs: u16,
    pub numBytes: u16,
    pub type_: u8,
    pub pin: u8,
    pub brightness: u8,
    pub pixels: *mut u8,
    pub endTime: u32,
}
#[test]
fn bindgen_test_layout_Adafruit_NeoPixel() {
    assert_eq!(::std::mem::size_of::<Adafruit_NeoPixel>() , 32usize , concat !
               ( "Size of: " , stringify ! ( Adafruit_NeoPixel ) ));
    assert_eq! (::std::mem::align_of::<Adafruit_NeoPixel>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( Adafruit_NeoPixel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . begun as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( begun ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . numLEDs as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( numLEDs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . numBytes as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( numBytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . type_ as * const
                _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . pin as * const _
                as usize } , 7usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( pin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . brightness as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( brightness ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . pixels as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( pixels ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const Adafruit_NeoPixel ) ) . endTime as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( Adafruit_NeoPixel ) ,
                "::" , stringify ! ( endTime ) ));
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel5beginEv"]
    pub fn Adafruit_NeoPixel_begin(this: *mut Adafruit_NeoPixel);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel4showEv"]
    pub fn Adafruit_NeoPixel_show(this: *mut Adafruit_NeoPixel);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel6setPinEh"]
    pub fn Adafruit_NeoPixel_setPin(this: *mut Adafruit_NeoPixel, p: u8);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel13setPixelColorEthhh"]
    pub fn Adafruit_NeoPixel_setPixelColor(this: *mut Adafruit_NeoPixel,
                                           n: u16, r: u8, g: u8, b: u8);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel13setPixelColorEthhhh"]
    pub fn Adafruit_NeoPixel_setPixelColor1(this: *mut Adafruit_NeoPixel,
                                            n: u16, r: u8, g: u8, b: u8,
                                            w: u8);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel13setPixelColorEtj"]
    pub fn Adafruit_NeoPixel_setPixelColor2(this: *mut Adafruit_NeoPixel,
                                            n: u16, c: u32);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel13setBrightnessEh"]
    pub fn Adafruit_NeoPixel_setBrightness(this: *mut Adafruit_NeoPixel,
                                           arg1: u8);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel8setColorEthhh"]
    pub fn Adafruit_NeoPixel_setColor(this: *mut Adafruit_NeoPixel,
                                      aLedNumber: u16, aRed: byte,
                                      aGreen: byte, aBlue: byte);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel8setColorEthhhh"]
    pub fn Adafruit_NeoPixel_setColor1(this: *mut Adafruit_NeoPixel,
                                       aLedNumber: u16, aRed: byte,
                                       aGreen: byte, aBlue: byte,
                                       aWhite: byte);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel14setColorScaledEthhhh"]
    pub fn Adafruit_NeoPixel_setColorScaled(this: *mut Adafruit_NeoPixel,
                                            aLedNumber: u16, aRed: byte,
                                            aGreen: byte, aBlue: byte,
                                            aScaling: byte);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel14setColorScaledEthhhhh"]
    pub fn Adafruit_NeoPixel_setColorScaled1(this: *mut Adafruit_NeoPixel,
                                             aLedNumber: u16, aRed: byte,
                                             aGreen: byte, aBlue: byte,
                                             aWhite: byte, aScaling: byte);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel14setColorDimmedEthhhh"]
    pub fn Adafruit_NeoPixel_setColorDimmed(this: *mut Adafruit_NeoPixel,
                                            aLedNumber: u16, aRed: byte,
                                            aGreen: byte, aBlue: byte,
                                            aBrightness: byte);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel14setColorDimmedEthhhhh"]
    pub fn Adafruit_NeoPixel_setColorDimmed1(this: *mut Adafruit_NeoPixel,
                                             aLedNumber: u16, aRed: byte,
                                             aGreen: byte, aBlue: byte,
                                             aWhite: byte, aBrightness: byte);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel12updateLengthEt"]
    pub fn Adafruit_NeoPixel_updateLength(this: *mut Adafruit_NeoPixel,
                                          n: u16);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel5clearEv"]
    pub fn Adafruit_NeoPixel_clear(this: *mut Adafruit_NeoPixel);
}
extern "C" {
    #[link_name = "_ZNK17Adafruit_NeoPixel9getPixelsEv"]
    pub fn Adafruit_NeoPixel_getPixels(this: *const Adafruit_NeoPixel)
     -> *mut u8;
}
extern "C" {
    #[link_name = "_ZNK17Adafruit_NeoPixel13getBrightnessEv"]
    pub fn Adafruit_NeoPixel_getBrightness(this: *const Adafruit_NeoPixel)
     -> u8;
}
extern "C" {
    #[link_name = "_ZNK17Adafruit_NeoPixel9numPixelsEv"]
    pub fn Adafruit_NeoPixel_numPixels(this: *const Adafruit_NeoPixel) -> u16;
}
extern "C" {
    #[link_name = "_ZNK17Adafruit_NeoPixel10getNumLedsEv"]
    pub fn Adafruit_NeoPixel_getNumLeds(this: *const Adafruit_NeoPixel)
     -> u16;
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel5ColorEhhh"]
    pub fn Adafruit_NeoPixel_Color(r: u8, g: u8, b: u8) -> u32;
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel5ColorEhhhh"]
    pub fn Adafruit_NeoPixel_Color1(r: u8, g: u8, b: u8, w: u8) -> u32;
}
extern "C" {
    #[link_name = "_ZNK17Adafruit_NeoPixel13getPixelColorEt"]
    pub fn Adafruit_NeoPixel_getPixelColor(this: *const Adafruit_NeoPixel,
                                           n: u16) -> u32;
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixel15brightnessToPWMEh"]
    pub fn Adafruit_NeoPixel_brightnessToPWM(this: *mut Adafruit_NeoPixel,
                                             aBrightness: byte) -> byte;
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixelC1Ethh"]
    pub fn Adafruit_NeoPixel_Adafruit_NeoPixel(this: *mut Adafruit_NeoPixel,
                                               n: u16, p: u8, t: u8);
}
extern "C" {
    #[link_name = "_ZN17Adafruit_NeoPixelD1Ev"]
    pub fn Adafruit_NeoPixel_Adafruit_NeoPixel_destructor(this:
                                                              *mut Adafruit_NeoPixel);
}
impl Adafruit_NeoPixel {
    #[inline]
    pub unsafe fn begin(&mut self) { Adafruit_NeoPixel_begin(self) }
    #[inline]
    pub unsafe fn show(&mut self) { Adafruit_NeoPixel_show(self) }
    #[inline]
    pub unsafe fn setPin(&mut self, p: u8) {
        Adafruit_NeoPixel_setPin(self, p)
    }
    #[inline]
    pub unsafe fn setPixelColor(&mut self, n: u16, r: u8, g: u8, b: u8) {
        Adafruit_NeoPixel_setPixelColor(self, n, r, g, b)
    }
    #[inline]
    pub unsafe fn setPixelColor1(&mut self, n: u16, r: u8, g: u8, b: u8,
                                 w: u8) {
        Adafruit_NeoPixel_setPixelColor1(self, n, r, g, b, w)
    }
    #[inline]
    pub unsafe fn setPixelColor2(&mut self, n: u16, c: u32) {
        Adafruit_NeoPixel_setPixelColor2(self, n, c)
    }
    #[inline]
    pub unsafe fn setBrightness(&mut self, arg1: u8) {
        Adafruit_NeoPixel_setBrightness(self, arg1)
    }
    #[inline]
    pub unsafe fn setColor(&mut self, aLedNumber: u16, aRed: byte,
                           aGreen: byte, aBlue: byte) {
        Adafruit_NeoPixel_setColor(self, aLedNumber, aRed, aGreen, aBlue)
    }
    #[inline]
    pub unsafe fn setColor1(&mut self, aLedNumber: u16, aRed: byte,
                            aGreen: byte, aBlue: byte, aWhite: byte) {
        Adafruit_NeoPixel_setColor1(self, aLedNumber, aRed, aGreen, aBlue,
                                    aWhite)
    }
    #[inline]
    pub unsafe fn setColorScaled(&mut self, aLedNumber: u16, aRed: byte,
                                 aGreen: byte, aBlue: byte, aScaling: byte) {
        Adafruit_NeoPixel_setColorScaled(self, aLedNumber, aRed, aGreen,
                                         aBlue, aScaling)
    }
    #[inline]
    pub unsafe fn setColorScaled1(&mut self, aLedNumber: u16, aRed: byte,
                                  aGreen: byte, aBlue: byte, aWhite: byte,
                                  aScaling: byte) {
        Adafruit_NeoPixel_setColorScaled1(self, aLedNumber, aRed, aGreen,
                                          aBlue, aWhite, aScaling)
    }
    #[inline]
    pub unsafe fn setColorDimmed(&mut self, aLedNumber: u16, aRed: byte,
                                 aGreen: byte, aBlue: byte,
                                 aBrightness: byte) {
        Adafruit_NeoPixel_setColorDimmed(self, aLedNumber, aRed, aGreen,
                                         aBlue, aBrightness)
    }
    #[inline]
    pub unsafe fn setColorDimmed1(&mut self, aLedNumber: u16, aRed: byte,
                                  aGreen: byte, aBlue: byte, aWhite: byte,
                                  aBrightness: byte) {
        Adafruit_NeoPixel_setColorDimmed1(self, aLedNumber, aRed, aGreen,
                                          aBlue, aWhite, aBrightness)
    }
    #[inline]
    pub unsafe fn updateLength(&mut self, n: u16) {
        Adafruit_NeoPixel_updateLength(self, n)
    }
    #[inline]
    pub unsafe fn clear(&mut self) { Adafruit_NeoPixel_clear(self) }
    #[inline]
    pub unsafe fn getPixels(&self) -> *mut u8 {
        Adafruit_NeoPixel_getPixels(self)
    }
    #[inline]
    pub unsafe fn getBrightness(&self) -> u8 {
        Adafruit_NeoPixel_getBrightness(self)
    }
    #[inline]
    pub unsafe fn numPixels(&self) -> u16 {
        Adafruit_NeoPixel_numPixels(self)
    }
    #[inline]
    pub unsafe fn getNumLeds(&self) -> u16 {
        Adafruit_NeoPixel_getNumLeds(self)
    }
    #[inline]
    pub unsafe fn Color(r: u8, g: u8, b: u8) -> u32 {
        Adafruit_NeoPixel_Color(r, g, b)
    }
    #[inline]
    pub unsafe fn Color1(r: u8, g: u8, b: u8, w: u8) -> u32 {
        Adafruit_NeoPixel_Color1(r, g, b, w)
    }
    #[inline]
    pub unsafe fn getPixelColor(&self, n: u16) -> u32 {
        Adafruit_NeoPixel_getPixelColor(self, n)
    }
    #[inline]
    pub unsafe fn brightnessToPWM(&mut self, aBrightness: byte) -> byte {
        Adafruit_NeoPixel_brightnessToPWM(self, aBrightness)
    }
    #[inline]
    pub unsafe fn new(n: u16, p: u8, t: u8) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        Adafruit_NeoPixel_Adafruit_NeoPixel(&mut __bindgen_tmp, n, p, t);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Adafruit_NeoPixel_Adafruit_NeoPixel_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
